"""

"""

from argparse import ArgumentParser
from datetime import datetime, timedelta
from io import BytesIO
from pathlib import Path
import sys
import time
from typing import Generator
import zipfile

import py7zr
import requests
from tqdm import tqdm


URL = "https://mb-api.abuse.ch/api/v1/"
PASSWORD = "infected"


def file_of_inputs_to_input(
    file: Path,
    skip_first_line: bool = False,
    csv_col_idx: int = 0,
) -> Generator[str, None, None]:
    with open(file, "r") as fp:
        for i, line in enumerate(fp):
            if i == 0 and skip_first_line:
                continue
            line = line.strip().split(",")
            yield line[csv_col_idx]


def wait_until_midnight():
    current = datetime.utcnow()
    midnight = datetime(current.year, current.month, current.day, 0, 0, 0) + timedelta(days=1)
    seconds = (midnight - current).total_seconds()

    with tqdm(total=int(seconds), unit="s") as pbar:
        print(f"{current=}, {midnight=}, wait={seconds}")
        while seconds > 0:
            time.sleep(1)
            seconds -= 1
            pbar.update(1)
    time.sleep(1)
    print(f"\nIt's now {str(midnight.time())} UTC. Done waiting!")


def download_file(h: str, outdir: Path) -> None:

    data = {
        "query": "get_file",
        "sha256_hash": h
    }

    response = requests.post(URL, data=data)

    if response.status_code != 200:
        print(f"HTTPErrpr: {response.status_code} for {h}")
        return

    with open((outdir / h).with_suffix(".7z"), "wb") as fp:
        fp.write(response.content)

    # with zipfile.ZipFile((outdir / h).with_suffix(".7z"), 'r') as zip_ref:
    #     zip_ref.extractall(outdir, pwd=PASSWORD.encode('utf-8'))


def main(hashes: list[str], outdir: Path, ext: str = ""):
    for h in tqdm(hashes):
        download_file(h, outdir)


def cli() -> None:
    parser = ArgumentParser()
    parser.add_argument("--outdir", type=Path, required=True)
    parser.add_argument("--input", type=Path, required=False)
    parser.add_argument("--file_of_inputs", type=Path, required=False)
    parser.add_argument("--ignore_complete", action="store_true")
    parser.add_argument("--extension", type=str, default="")
    args = parser.parse_args()

    if args.input:
        hashes = [args.input]
    if args.file_of_inputs:
        hashes = list(file_of_inputs_to_input(args.file_of_inputs))
    else:
        raise ValueError("No files to scan")

    if args.ignore_complete:
        complete = set(f.name for f in args.outdir.iterdir())
        hashes = filter(lambda h: h not in complete, hashes)

    main(list(hashes), args.outdir, args.extension)


if __name__ == "__main__":
    cli()
