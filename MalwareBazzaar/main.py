"""Download hashes from Malware Bazzarr.
"""

from collections import Counter
from pathlib import Path
from pprint import pprint
import subprocess


URL = "https://bazaar.abuse.ch/export/csv/full/"
DUMP = Path("./dump.zip")
FULL = Path("./full.csv")
SHAS = Path("./shas")

if not FULL.exists() and not DUMP.exists():
    subprocess.run(["curl", "-o", DUMP.as_posix(), URL])
if not FULL.exists() and DUMP.exists():
    subprocess.run(["unzip", DUMP.as_posix()])


COLUMNS = [
    "first_seen_utc",
    "sha256_hash",
    "md5_hash",
    "sha1_hash",
    "reporter",
    "file_name",
    "file_type_guess",
    "mime_type",
    "signature",
    "clamav",
    "vtpercent",
    "imphash",
    "ssdeep",
    "tlsh",
]

TYPES = ("macho", "elf", "exe", "dll", "apk")

files = {t : [] for t in TYPES}
guesses = []
with open(FULL) as fp:
    for line in fp:
        line = line.replace("\"", "")
        d = {c : v for c, v in zip(COLUMNS, line.split(","))}
        if not (file_type := d.get("file_type_guess", "").strip()):
            continue
        guesses.append(file_type)
        if file_type not in TYPES:
            continue
        if not (sha256_hash := d.get("sha256_hash", "").strip()):
            continue
        files[file_type].append(sha256_hash)

SHAS.mkdir(exist_ok=True)
for t, fs in files.items():
    (SHAS / f"./{t}.txt").write_text("\n".join(fs) + "\n")

print("STATISTICS")
pprint({t: len(fs) for t, fs in files.items()})
pprint(sorted((s, c) for s, c in Counter(guesses).items() if c > 100))
