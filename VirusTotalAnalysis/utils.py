"""
Functional interface to utilities.
"""

from collections import Counter
import hashlib
import json
from pathlib import Path
from pprint import pprint
import sys
from typing import Literal, Optional

from tqdm import tqdm


def str_is_hash(s: str, mode: Literal["sha256", "sha1", "md5"]) -> bool:
    if not all(s in "0123456789abcdef" for s in s):
        return False
    if mode == "sha256":
        return len(s) == 64
    elif mode == "md5":
        return len(s) == 32
    elif mode == "sha1":
        return len(s) == 40
    else:
        raise ValueError(f"Invalid mode: {mode}")


def get_file_hash(f: Path, mode: Literal["sha256", "sha1", "md5"]) -> str:
    b = f.read_bytes()
    if mode == "sha256":
        hash_ = hashlib.sha256(b)
    elif mode == "md5":
        hash_ = hashlib.md5(b)
    elif mode == "sha1":
        hash_ = hashlib.sha1(b)
    else:
        raise ValueError(f"Invalid mode: {mode}")
    return hash_.hexdigest()


def rename_file(
    file: Path,
    mode: Literal["sha256", "sha1", "md5"],
    suffix: Optional[str] = None,
    exists_ok: bool = False,
    already_hashed_ok: bool = False,
) -> None:
    if not already_hashed_ok and str_is_hash(file.name, mode):
        raise ValueError(f"{file.name} is already a hash")
    hash_ = get_file_hash(file, mode)
    outfile = file.parent / hash_
    if suffix:
        outfile = outfile.with_suffix(suffix)
    if not exists_ok and outfile.exists():
        raise FileExistsError(f"{outfile.as_posix()} already exists")
    file.rename(outfile)


def sorted_list_of_dicts(l: list[dict[str, int | str]]) -> list[str, int]:
    r = [(d["value"], d["count"]) for d in l]
    r.sort(key=lambda x: x[1], reverse=True)
    return r


def threat_classification(d: dict) -> dict:
    r = d["data"]["attributes"]["popular_threat_classification"]
    return r


def threat_name(report: dict) -> tuple[str, int]:
    r = threat_classification(report)["popular_threat_name"]
    r = sorted_list_of_dicts(r)
    return r


def threat_category(report: dict) -> tuple[str, int]:
    r = threat_classification(report)["popular_threat_category"]
    r = sorted_list_of_dicts(r)
    return r


def threat_label(report: dict) -> str:
    r = threat_classification(report)["suggested_threat_label"]
    return r


def analyze_reports():
    path = Path("/home/lk3591/Documents/datasets/VirusShare/VirusShare_ELF_20190212/reports")
    files = list(path.iterdir())
    fails = []
    c_1, c_2, c_3 = Counter(), Counter(), Counter()
    for f in tqdm(files):
        with open(f) as fp:
            d = json.load(fp)
        try:
            threat_classification(d)
        except KeyError as err:
            fails.append(err.args[0])
            continue
        try:
            names = [n for n, _ in threat_name(d)]
            val = [names[0]]
            c_1.update(val)
        except KeyError as err:
            fails.append(err.args[0])
        try:
            cats = [c for c, _ in threat_category(d)]
            val = [cats[0]]
            c_2.update(val)
        except KeyError as err:
            fails.append(err.args[0])
        try:
            label = threat_label(d)
            val = [label]
            c_3.update(val)
        except KeyError as err:
            fails.append(err.args[0])

    print(f"{len(files)=}")
    pprint(Counter(fails))
    pprint(c_1.most_common(10))
    pprint(c_2.most_common(10))
    pprint(c_3.most_common(10))


if __name__ == "__main__":
    ...
