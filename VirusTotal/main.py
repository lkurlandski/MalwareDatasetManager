"""
Extract stuff from VT.
"""

from argparse import ArgumentParser
from itertools import chain
from lzma import LZMAError
from pathlib import Path
from pprint import pformat, pprint
import shutil
import sys
from typing import Optional

import py7zr
from tqdm import tqdm


REPORTS = "reports"
BINARIES = "binaries"
NONARCHIVED = "2018/2018-07-17"
PASSWORDS = ["infected", "VirusTotal"]


def zip_extract(
    f: Path, path: Path, newdir: Optional[Path] = None, newfile: Optional[Path] = None,
) -> None:
    if newdir and newfile:
        raise ValueError(f"Expected 1 of {newdir=} or {newfile=}, got both.")
    newpath = None

    try:
        with py7zr.SevenZipFile(f, mode='r', password=PASSWORDS[0]) as z:
            z.extractall(path=path)
            names = z.getnames()
    except LZMAError:
        with py7zr.SevenZipFile(f, mode='r', password=PASSWORDS[1]) as z:
            z.extractall(path=path)
            names = z.getnames()

    if newfile:
        if len(names) != 1:
            raise ValueError(f"Expected 1 file, got {len(names)}, when extracting {f.as_posix()}.")
        newpath = newfile
    elif newdir:
        newpath = newdir

    if newpath:
        (path / names[0]).rename(newpath)


def all_possible_targets(vt_path: Path) -> list[str]:
    dirs = list(p for p in vt_path.rglob("*") if p.is_dir() and NONARCHIVED not in p.as_posix())
    all_targets = set()
    for d in dirs:
        all_targets.update(d.iterdir())
    all_targets.update((vt_path / NONARCHIVED).iterdir())
    all_targets = sorted(list(set(p.stem for p in all_targets)))
    return all_targets


def locate_compressed_files(vt_path: Path, targets: list[str]) -> tuple[list[Path], list[Path]]:
    found = list()
    for f in vt_path.rglob("*"):
        if f.is_dir():
            continue
        if not any(t in f.as_posix() for t in targets):
            continue
        found.append(f)

    archives = sorted([p for p in found if NONARCHIVED not in p.as_posix()])
    singular = sorted([p for p in found if NONARCHIVED in p.as_posix()])

    return archives, singular


def decompress_archives(extract_path: Path, vt_path: Path, paths: list[Path]) -> None:
    pbar = tqdm(paths)
    for f in pbar:
        curr = Path().joinpath(*f.relative_to(vt_path).parts[1:])
        pbar.set_description(curr.as_posix())
        if (extract_path / curr).with_suffix("").exists():
            continue

        newdir = extract_path / f.parent.stem / f.stem
        newdir.parent.mkdir(exist_ok=True, parents=True)

        try:
            zip_extract(f, extract_path, newdir=newdir)
        except LZMAError as err:
            print(f"{str(err)} {curr=}", file=sys.stderr)


def decompress_leftovers(paths: list[Path]) -> None:
    pbar = tqdm(paths)
    for f in pbar:
        pbar.set_description(f.parent.name)
        try:
            zip_extract(f, f.parent, newfile=f.parent / f.stem)
            f.unlink()
        except LZMAError as err:
            print(f"{str(err)} {f=}", file=sys.stderr)


def decompress_singulars(extract_path: Path, paths: list[Path]) -> None:
    completed = set(p for p in extract_path.rglob("*") if p.suffix in ("", ".json") and p.is_file())
    paths = [p for p in paths if p not in completed]
    pbar = tqdm(paths)
    for f in pbar:
        pbar.set_description(f.parent.name)
        path = extract_path / NONARCHIVED.split("/")[1] / f.parent.stem
        path.mkdir(exist_ok=True, parents=True)
        newfile = (path / f.name)

        if f.suffix == ".7z":
            newfile = newfile.with_suffix("")
            if newfile in completed:
                continue
            try:
                zip_extract(f, path, newfile=newfile)
            except LZMAError as err:
                print(f"{str(err)} {f=}", file=sys.stderr)
        elif f.suffix == ".json":
            newfile = newfile.with_suffix(".json")
            if newfile in completed:
                continue
            shutil.copy2(f, newfile)


def move_reports_and_binaries(extract_path: Path,) -> None:

    def fn(f: Path) -> bool:
        if f.is_dir():
            return False
        if f.parent.name in (REPORTS, BINARIES):
            return False
        # if f.suffix not in (".json", ""):
        #     return False
        return True

    reports_and_binaries = list(filter(fn, extract_path.rglob("*")))

    print(
        f"{sum(1 for p in reports_and_binaries if p.suffix == '.json')} reports and \n"
        f"{sum(1 for p in reports_and_binaries if p.suffix == '')} binaries and \n"
        f"{sum(1 for p in reports_and_binaries if p.suffix == '.7z')} 7z's and \n"
        f"{sum(1 for p in reports_and_binaries if p.suffix not in ('.json', ''))} other files."
    )

    for f in tqdm(reports_and_binaries):
        if f.suffix == ".json":
            reports = f.parent / REPORTS
            reports.mkdir(exist_ok=True)
            f.rename(reports / f.name)
        elif f.suffix == "":
            binaries = f.parent / BINARIES
            binaries.mkdir(exist_ok=True)
            f.rename(binaries / f.name)


def main(
    do_archives: bool,
    do_leftovers: bool,
    do_singlulars: bool,
    move: bool,
    extract_path: Path,
    vt_path: Path,
    targets: list[str],
    verbose: bool = False,
) -> None:
    if verbose:
        print(f"All Possible Targets:\n{pformat(all_possible_targets(vt_path))}\n{'-'*64}")

    archives, singulars = locate_compressed_files(vt_path, targets)
    print(f"Found {len(archives)} archives and {len(singulars)} singulars in {vt_path.as_posix()}.")
    if verbose:
        print(f"Archives:\n{pformat(archives)}\n{'-'*64}")
        print(f"Singulars:\n{pformat(singulars)}\n{'-'*64}")

    if do_archives:
        print("DECOMPESSING ARCHIVES")
        decompress_archives(extract_path, vt_path, archives)

    if do_leftovers:
        print("DECOMPRESSING LEFTOVERS")
        decompress_leftovers(list(extract_path.rglob("*.7z")))
        
    if do_singlulars:
        print("DECOMPRESSING & COPYING SINGULARS")
        decompress_singulars(extract_path, singulars)

    if move:
        print("MOVING")
        move_reports_and_binaries(extract_path)


def cli() -> None:
    parser = ArgumentParser(description="Extract stuff from VT.")
    parser.add_argument("--do_archives", action="store_true", help="Decompress archives.")
    parser.add_argument("--do_leftovers", action="store_true", help="Decompress leftovers.")
    parser.add_argument("--do_singulars", action="store_true", help="Decompress singulars.")
    parser.add_argument("--move", action="store_true", help="Move reports and binaries.")
    parser.add_argument("--vt_path", type=Path, default="/home/lk3591/Documents/datasets/VirusTotal/original")
    parser.add_argument("--extract_path", type=Path, default="/home/lk3591/Documents/datasets/VirusTotal/extracted")
    parser.add_argument("--targets", nargs='+', type=str, default=["ELF", "Mach-O", "Win32_DLL", "Win32_EXE"])
    args = parser.parse_args()
    main(args.do_archives, args.do_leftovers, args.do_singulars, args.move, args.extract_path, args.vt_path, args.targets)


if __name__ == "__main__":
    cli()
